int32_t 
rounding_divide_by_POT(int32_t x, int32_t exp) {
    int32_t mask = (1ll << exp) - 1
    int32_t remainder = x & mask
    int32_t thresh = (mask >> 1) + (((x < 0) ? ~0 : 0) & 1)
    return (x >> exp) + (((remainder > thresh) ? ~0 : 0) & 1)
}

int32_t 
saturating_rounding_doubling_high_mul(int32_t a, int32_t b) {
    bool overflow = a == b && a == -2 ^ 31
    int64_t ab_64 = int64_t(a) * int64_t(b)
    int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30))
    int32_t ab_x2_high32 = 
        cast<int32_t>((ab_64 + nudge) / (1ll << 31))
    if overflow:
        return 2 ^ 31 - 1
    else:
        return ab_x2_high32
}

int32_t 
quant(int32_t acc, int32_t mult, int32_t shift) {
    int32_t left_shift  = max(shift, 0)
    int32_t right_shift = min(-shift, 0)
    return rounding_divide_by_POT(
        saturating_rounding_doubling_high_mul(
            acc * (1 << left_shift), mult),
        right_shift
    )
}