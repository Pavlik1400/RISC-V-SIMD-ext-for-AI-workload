#include "models/{{ model_name }}/{{ model_name }}.h"

#include <math.h>
#include <stdio.h>

#include "menu.h"
#include "models/{{ model_name }}/{{ model_name }}_model.h"
#include "models/{{ model_name }}/{{ model_name }}_test_data.h"
#include "tensorflow/lite/micro/examples/person_detection/no_person_image_data.h"
#include "tensorflow/lite/micro/examples/person_detection/person_image_data.h"
#include "playground_util/models_utils.h"
// {% if apply_quantization %}
// #include "playground_util/models_utils.h"
// {% endif %}
#include "tflite.h"

extern "C" {
#include "fb_util.h"
};

#ifndef CFU_MAX
#define CFU_MAX(x, y) (((x) >= (y)) ? (x) : (y))
#endif  // CFU_MAX

#ifndef CFU_MIN
#define CFU_MIN(x, y) (((x) <= (y)) ? (x) : (y))
#endif  // CFU_MIN

// This method creates interpreter, arena, loads model to memory
static void {{ model_name }}_init(void) { 
    tflite_load_model({{ model_name }}_model, {{ model_name }}_model_len); 
}

// {% if apply_quantization %}
// float dequantized_output[{{ num_classes }}];
// {% endif %}

// Run classification, after input has been loaded
static float *{{ model_name }}_classify() {
  printf("Running {{ model_name }} model classification\n");
  tflite_classify();

  // Process the inference results.
  float* output = (float*)tflite_get_output();
  return output;
}

#define NUM_CLASSES {{ num_classes }}

/* Returns true if failed */
static bool perform_one_test(float* input, float* expected_output, float epsilon) {
  bool failed = false;
  tflite_set_input(input);
  float* output = {{ model_name }}_classify();
  for (size_t i = 0; i < NUM_CLASSES; ++i) {
    float y_true = expected_output[i];
    float y_pred = output[i];
    float delta = CFU_MAX(y_true, y_pred) - CFU_MIN(y_true, y_pred);

    int* y_true_u32 = (int*)(&y_true);
    int* y_pred_u32 = (int*)(&y_pred);
    if (delta > epsilon) {
      printf(
          "*** {{ model_name }} test failed %d (actual) != %d (pred). "
          "Class=%u\n",
          *y_true_u32, *y_pred_u32, i);
      failed = true;
    } else {
      // printf(
      //     "+++ Signal modulation 1 test success %d (actual) != %d (pred). "
      //     "Class=%u\n",
      //     *y_true_u32, *y_pred_u32, i);
    }
  }
  return failed;
}

static void do_tests() {
  float epsilon = {{ epsilon }}f;
  bool failed = false;

  {% for cur_test_data in test_data %}
  failed = failed || perform_one_test(
    {{ cur_test_data.y }},
    {{ cur_test_data.pred }}, 
    epsilon
  );    
  {% endfor %}

  if (failed) {
    printf("FAIL {{ model_name }} tests failed\n");
  } else {
    printf("OK   {{ model_name }} tests passed\n");
  }
}


static struct Menu MENU = {
    "Tests for {{ model_name }} model",
    "sine",
    {
        MENU_ITEM('g', "Run {{ model_name }} tests (check for expected outputs)", do_tests),
        MENU_END,
    },
};

// For integration into menu system
void {{ model_name }}_menu() {
  {{ model_name }}_init();
  menu_run(&MENU);
}
